{"Name":"Video Player","Id":3096,"Alias":"video-player","Description":"Finally, a Xamarin Forms component that makes it extremely easy to **render the native video player on every mobile platform** and respond to common video events all from shared Xamarin Forms code. This component provides a highly customizable development experience with a solid foundation to develop rich and visually interesting cross-platform mobile video playback.\r\n\r\nThis video player does all the heavy lifting for you, allowing you to spend more time focused on making your mobile app great and less on the intricate details of managing network state, decoding and media playback.\r\n\r\n### A Video Player on Every Platform in 2 Minutes...\r\n\r\nThis is the simplest example of how to use the video player component that fills an entire page. Just declare the `VideoPlayer` tag in your XAML Forms page and specify the location of the video file. For more advanced configuration, check out the [Getting Started](gettingstarted/video-player) page.\r\n\r\n```XML\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:o=\"clr-namespace:Octane.Xam.VideoPlayer;assembly=Octane.Xam.VideoPlayer\"\r\n             x:Class=\"VideoPlayerSamples.VideoPlayerBasicExamplePage\"\r\n             Title=\"Basic Video Player\"\u003e\r\n\r\n    \u003co:VideoPlayer Source=\"http://vjs.zencdn.net/v/oceans.mp4\" /\u003e\r\n\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n### Native Mobile Performance\r\n\r\n\u003cimg src=\"http://i.giphy.com/26tP7ug0D3lG9Sn16.gif\" width=\"274\" style=\"float:right;margin-left:1em;\" /\u003e\r\n\r\nThis video player component is fully cross-platform between the iOS, Android, and Windows Phone mobile operating systems as it renders the native video player on each platform, taking on the look and feel of the operating system they are running on. This ensures your mobile application looks and works its best on each system supported.\r\n\r\n**No complex knowledge is required to properly manage the playback of video files.** This component handles playback state and renders the native video player for each mobile platform for the best playback performance. Under the hood, this component uses the \u003ca href=\"https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVPlayer_Class\" target=\"_blank\"\u003e`AVPlayer`\u003c/a\u003e on iOS, the \u003ca href=\"http://developer.android.com/reference/android/media/MediaPlayer.html\" target=\"_blank\"\u003e`MediaPlayer`\u003c/a\u003e on Android, and the \u003ca href=\"https://msdn.microsoft.com/en-us/library/windows/apps/system.windows.controls.mediaelement(v=vs.105).aspx\" target=\"_blank\"\u003e`MediaElement`\u003c/a\u003e on Windows Phone.\r\n\r\n- Optimized for Xamarin\r\n- Cross-platform Xamarin Forms XAML component\r\n- Can play local files, embedded resources or HTTP(S)-based streamed files from the web\r\n- Simple configuration\r\n- Low overhead/footprint\r\n- Handles and releases resources for you\r\n\r\n### Free Trial Limitations\r\n\r\nYou can download the free trial using the trial button above. **The trial is limited to 15 seconds of video playback.** Once you have acquired the full version, you will have complete access to all features of the video player.\r\n\r\n\r\n### Licensing\r\n\r\nBe sure to review the licensing link above. The license is valid for a single mobile application deployed across all three platforms (Android, iOS, Windows Phone). Each separate mobile app idea requires a new license as stated in the agreement. Check out the getting started link above to get your license key which is directly mapped to your mobile app.\r\n\r\n\r\n### Platform Requirements\r\n\r\nPlease make sure the platforms you\u0027re targeting meet the minimum requirements listed below.\r\n\r\n| Platform \t\t\t| Minimum Version    \t|\r\n|----------------\t|--------------------\t|\r\n| iOS      \t\t\t| 8.0+ Unified        \t|\r\n| Android  \t\t\t| 4.1+ (API Level 16) \t|\r\n| Windows Phone  \t| 8.0+ \t                |\r\n","Version":"1.2.1","Summary":"A Xamarin Forms control to render the native video player on every platform.","QuickStart":"# Getting Started with Video\r\n\r\n\u003cimg src=\"http://i.imgur.com/CrqQVhP.png\" /\u003e\r\n\u003cbr/\u003e\r\n## Installation\r\n\r\n### 1. Get Your License Key\r\nAfter purchasing the component, you will need to fill out a short form here to obtain your license key: **http://goo.gl/forms/nIqUXVz1Im**. You should receive a response the same business day.\r\n\r\n### 2. Initialization\r\n\r\nWhen adding a video player to a Xamarin.Forms application, **Octane.Xam.VideoPlayer** is a a separate component package that you should add to every project in the solution using the Component Store Manager (see [Walkthrough: Including a Component in Your Project](https://developer.xamarin.com/guides/cross-platform/application_fundamentals/components_walkthrough)).\r\n\r\nAfter installing the component package, insert the following initialization code in each native application project:\r\n\r\n```csharp\r\nFormsVideoPlayer.Init(\"LICENSE_KEY_HERE\");\r\n```\r\n\r\nThis call should be made after the `Xamarin.Forms.Forms.Init()` method call. The Xamarin.Forms templates have this call in the following files for each platform:\r\n\r\n- **iOS** - `AppDelegate.cs` file, in the FinishedLaunching method.\r\n- **Android** - `MainActivity.cs` file, in the OnCreate method.\r\n- **Windows Phone 8 (Silverlight)** - `MainPage.xaml.cs` file, in the MainPage constructor.\r\n\r\nOnce the component package has been added and the initialization method called inside each applcation, Octane.Xam.VideoPlayer APIs can be used in the common PCL or Shared Project code.\r\n\r\n### 3. Create a Video Player in XAML\r\n\r\nThe snippet below shows the most basic example of using the video player. Be sure to check out the Chill Player example application for more advanced example usage as well as all of the documentation that follows. \r\n\r\n```XML\r\n\u003c?xml version=\"1.0\" encoding=\"utf-8\" ?\u003e\r\n\u003cContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n             xmlns:o=\"clr-namespace:Octane.Xam.VideoPlayer;assembly=Octane.Xam.VideoPlayer\"\r\n             x:Class=\"VideoPlayerSamples.VideoPlayerBasicExamplePage\"\r\n             Title=\"Basic Video Player\"\u003e\r\n\r\n    \u003co:VideoPlayer Source=\"http://vjs.zencdn.net/v/oceans.mp4\" /\u003e\r\n\r\n\u003c/ContentPage\u003e\r\n```\r\n\r\n**When developing on Android**, you will need to use a real device to debug your application since the emulator is likely not powerful enough for video playback.\r\n\r\n\u003cbr/\u003e\r\n## VideoPlayer XAML Control\r\n\r\nShown below are the complete set of options available with the VideoPlayer control and the possible values separated by the bar symbol. All properties of the player are documented extremely well in code comments if you need more information on a specific property. Due to the vastly different nature of video playback on each platform, the properties and events below are the common ones that all platforms share.\r\n\r\nThe `Source` property takes a `VideoSource` which behaves very similarly to the Xamarin Forms \u003ca href=\"https://developer.xamarin.com/guides/cross-platform/xamarin-forms/working-with/images/\" target=\"_blank\"\u003eImageSource\u003c/a\u003e. The same behavior and logic described in that documentation can also be applied here by using `VideoSource` instead of `ImageSource`.\r\n\r\n```XAML\r\n\u003cOctane:VideoPlayer\r\n\t\r\n\tAutoPlay=\"True|False\"\r\n\tDisplayControls=\"True|False\"\r\n\tFillMode=\"Resize|ResizeAspect|ResizeAspectFill\"\r\n\tTimeElapsedInterval=\"0,1,2,3...\"\r\n\tRepeat=\"True|False\"\r\n\tVolume=\"...\"\r\n\tSource=\"http://...\"\r\n\t\r\n\tPlaying=\"VideoPlayer_OnPlaying\"\r\n\tPaused=\"VideoPlayer_OnStopped\"\r\n\tTimeElapsed=\"VideoPlayer_OnTimeElapsed\"\r\n\tCompleted=\"VideoPlayer_OnCompleted\"\r\n\tFailed=\"VideoPlayer_OnFailed\"\r\n\tPlayerStateChanged=\"VideoPlayer_OnPlayerStateChanged\"\r\n\t/\u003e\r\n```\r\n\r\n\u003cbr/\u003e\r\n## Player Properties\r\n\r\nCommon video player operations are described here.\r\n\r\n| Property            | Description                                                                                                                                   |\r\n|---------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\r\n| AutoPlay            | Specifies that the video will start playing as soon as it is ready. Default value is False.                                                   |\r\n| DisplayControls     | Specifies that video controls should be displayed (such as a play and pause button). Default value is True.                                   |\r\n| FillMode            | Defines how the video content is displayed within the player layer\u0027s bounds. Default value is ResizeAspect.                                   |\r\n| TimeElapsedInterval | The time interval in seconds for the TimeElapsed event firing to occur. Default value is 0 seconds which means TimeElapsed will not fire.     |\r\n| Repeat              | Repeat video when playback is complete. Default is value False.                                                                               |\r\n| Volume              | The volume level of the current media stream. The default is the value currently assigned to the system volume.\t  \t\t\t\t\t\t\t  |\r\n| Source              | A local file path or remote URL to a video file.                                                                                              |\r\n| CurrentTime         | A read-only bindable playback time for the current video.                                                                                     |\r\n| State         \t  | A read-only bindable property indicating the current state of the video player (e.g. Idle, Prepared, Playing, etc.)                           |\r\n| IsLoading        \t  | A read-only bindable property indicating the video is loading for playback.\t\t\t\t\t\t\t\t\t\t                              |\r\n\u003cbr/\u003e\r\n## Playback Events\r\n\r\nThis component gives you the ability to subscribe to a wide variety of events that typically occur during video playback with the event handlers below. The EventArgs that are passed to each event firing contain a wealth of information about the current state of the player (current time, total duration, volume level, etc.).\r\n\r\n| Event              \t| Description                                                                                                               \t|\r\n|--------------------\t|---------------------------------------------------------------------------------------------------------------------------\t|\r\n| Playing            \t| Notification the playback rate has changed to a non-zero rate due to the user pressing play or some other action.         \t|\r\n| Paused             \t| Notification the playback rate has changed to zero due to the user pressing pause or some other action.                   \t|\r\n| TimeElapsed        \t| Notification the specified number of seconds configured in the `VideoPlayer.TimeElapsedInterval` have passed.             \t|\r\n| Completed          \t| Notification fires when the video player has reached the end of the playback stream.                                      \t|\r\n| Failed             \t| Notification fires when the video player experiences an error during playback or during initialization of the media file. \t|\r\n| PlayerStateChanged \t| Event notification fires when the video player\u0027s internal state machine changes state.                                    \t|\r\n\r\n\u003cbr/\u003e\r\n## Commands \r\n\r\nIt\u0027s also possible to bind other Xamarin Forms controls such as buttons to common video player operations noted below. This could be useful in situations where you want to create your own cross-platform buttons for these operations and perhaps set `DisplayControls=\"False\"` on the video player.\r\n\r\n| Command      \t| Description                          \t|\r\n|--------------\t|------------------------------------\t|\r\n| PlayCommand  \t| Begins playback of the media file. \t|\r\n| PauseCommand \t| Stops playback of the media file.  \t|\r\n| SeekCommand  \t| Seeks a specific number of seconds forward or backward in the playback stream. This command takes an integer command parameter equal to the number of seconds forward (positive number) or backward (negative number) to seek. |\r\n\r\n\u003cbr/\u003e\r\n## Compatible Video Playback Streams\r\n\r\nYou will want to make sure the video files you play are compatible with the mobile platforms you are targeting. \u003ca href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\"\u003eAndroid\u003c/a\u003e, \u003ca href=\"https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/MediaLayer/MediaLayer.html\" target=\"_blank\"\u003eiOS\u003c/a\u003e, and \u003ca href=\"https://msdn.microsoft.com/en-us/library/windows/apps/Ff462087(v=VS.105).aspx\" target=\"_blank\"\u003eWindows Phone\u003c/a\u003e all have documentation on the media formats and baseline encoding parameters they support.\r\n\r\nThis video player component requires **a valid URL to a video file with a file extension (for example: .mp4, .webm, .avi)**. If you want to use a video codec that works on the majority of devices, use H.264-encoded video in MP4 files.\r\n\r\n\r\n### Streaming Video From Popular Sites like YouTube and Vimeo\r\n\r\nWithout some help, the native video players on mobile devices are unable to stream URLs directly from popular video hosting sites like YouTube and Vimeo. There is a little more work involved to get the correct URL for playback. **The XAML markup extensions for Vimeo and YouTube shown below are provided as a convenience in the Chill Player sample app and are not guaranteed to be as reliable as integrating the YouTube or Vimeo APIs into your application. They are provided as experimental functionality.**\r\n\r\n\u003cbr/\u003e\r\n## XAML Markup Extensions\r\n\r\nThe demo app (Chill Player) comes with several useful extensions methods to make your XAML development more enjoyable.\r\n\r\n| Markup Extension       \t| Description                                                             \t|\r\n|------------------------\t|-------------------------------------------------------------------------\t|\r\n| VideoResourceExtension \t| Constructs a VideoSource from a video resource embedded in a PCL.\u003cbr/\u003e**Example:** `\u003co:VideoPlayer Source=\"{e:VideoResourceExtension demo.mp4 }\" /\u003e`\t|\r\n| YouTubeVideoId         \t| Converts a YouTube video ID into a compatible stream URL for playback.\u003cbr/\u003e**Example:** `\u003co:VideoPlayer Source=\"{e:YouTubeVideoId vu4WK-FMyIg }\" /\u003e` \t\t|\r\n| VimeoVideoId           \t| Converts a Vimeo video ID into a compatible stream URL for playback.\u003cbr/\u003e**Example:** `\u003co:VideoPlayer Source=\"{e:VimeoVideoId 73901538 }\" /\u003e`    \t\t\t|\r\n\r\n\u003cbr/\u003eYou can access these markup extensions by adding the following namespace to your XAML page:\r\n\r\n`xmlns:me=\"clr-namespace:ChillPlayer.MarkupExtensions;assembly=ChillPlayer\"`\r\n\r\n\u003cbr/\u003e\r\n## App Permissions\r\n\r\nDepending on what you are using the video player for, you may need to add some of the following permissions to your manifest files for each respective platform.\r\n\r\n\u003e ### Streaming Video\r\n\u003e If you are using the video player to stream network-based content, your application must request network access.\r\n\r\n\u003e | Platform | Manifest Declaration |\r\n\u003e |----------|----------------------|\r\n\u003e | Android  | In AndroidManifest.xml:\u003cbr/\u003e```\u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e```\t|\r\n\u003e | iOS\t\t | iOS 9+ requires permission to stream basic http (non-https) content due to Apple\u0027s new App Transport Security (ATS). The below convenience snippet can be placed in the info.plist to allow all http based URLs through but you will want to **add permissions for specific domains to prevent app store rejection.**\u003cbr/\u003e ```\u003ckey\u003eNSAppTransportSecurity\u003c/key\u003e\u003cdict\u003e\u003ckey\u003eNSAllowsArbitraryLoads\u003c/key\u003e\u003ctrue/\u003e\u003c/dict\u003e```|\r\n\r\n\u003e ### Wake Lock Permission\r\n\u003e If your player application needs to keep the screen from dimming or the processor from sleeping.\r\n\r\n\u003e | Platform | Manifest Declaration |\r\n\u003e |----------|----------------------|\r\n\u003e | Android  | In AndroidManifest.xml:\u003cbr/\u003e```\u003cuses-permission android:name=\"android.permission.WAKE_LOCK\" /\u003e``` |\r\n\r\n\u003cbr/\u003e\r\n## Useful Resources\r\n\r\n- \u003ca href=\"http://videohive.net/?ref=octanesoftware\" target=\"_blank\"\u003eVideoHive\u003c/a\u003e: 215,653 Royalty Free Video Files From $4\r\n- \u003ca href=\"http://www.dreamstime.com/stock-video-footage#res11336177\" target=\"_blank\"\u003eDreamstime\u003c/a\u003e: Professional stock video\r\n\r\n\u003cbr/\u003e\r\n## Bug Queue\r\n\r\nIf you have a feature request, enhancement, or need to report a bug with this component, please **\u003ca href=\"https://bitbucket.org/OctaneSoftware/octane.xam.videoplayer/issues\" target=\"_blank\"\u003eopen a new issue\u003c/a\u003e** in the issue tracker.","Hash":"1b21e4f555cd56ae65b8d686fb16888a","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":"1b21e4f555cd56ae65b8d686fb16888a"}